import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "de.undercouch.download" version "4.1.1"
    id "net.researchgate.release" version "2.8.0"
    id "maven-publish"
}

def jdkModules = ""

configurations {
    ballerinaLinuxDistribution
    ballerinaWindowsDistribution
    ballerinaMacDistribution
}

def ballerinaJreLinuxZip = file("$project.buildDir/distributions/ballerina-jre-linux-${project.version}.zip")
def ballerinaJreWindowsZip = file("$project.buildDir/distributions/ballerina-jre-windows-${project.version}.zip")
def ballerinaJreMacOSZip = file("$project.buildDir/distributions/ballerina-jre-macos-${project.version}.zip")

task getModuleList {
    // Reads default modules included in AdoptOpenJre 11
    def defaultModuleFile = new File("$projectDir/resources/adoptOpenJre11_modules.json")
    def defaultModules = new JsonSlurper().parseText(defaultModuleFile.text).modules.join(',')

    // Reads additional modules required for ballerina runtime.
    def additionalModuleFile = new File("$projectDir/resources/additional_modules.json")
    def additionalModules = new JsonSlurper().parseText(additionalModuleFile.text).modules.join(',')
    jdkModules = "${defaultModules},${additionalModules}"
}

task downloadJdkforLinux(type: Download) {
    src project.linuxJdkUrl
    dest new File("$buildDir/temp/downloads/", "jdk-linux.tar.gz")
    overwrite false
    onlyIfModified true
}

task downloadJdkforWindows(type: Download) {
    src project.windowsJdkUrl
    dest new File("$buildDir/temp/downloads/", "jdk-windows.zip")
    overwrite false
    onlyIfModified true
}

task downloadJdkforMac(type: Download) {
    src project.macJdkUrl
    dest new File("$buildDir/temp/downloads/", "jdk-macOS.tar.gz")
    overwrite false
    onlyIfModified true
}

task extractJdkForLinux(type: Copy, dependsOn: downloadJdkforLinux) {
    from tarTree(downloadJdkforLinux.dest)
    into "$buildDir/temp/extracted/jdk-linux"
    includeEmptyDirs = false
}

task extractJdkForWindows(type: Copy, dependsOn: downloadJdkforWindows) {
    from zipTree(downloadJdkforWindows.dest)
    into "$buildDir/temp/extracted/jdk-windows"
    includeEmptyDirs = false
}

task extractJdkForMac(type: Copy, dependsOn: downloadJdkforMac) {
    from tarTree(downloadJdkforMac.dest)
    into "$buildDir/temp/extracted/jdk-mac"
    includeEmptyDirs = false
}

task assembleJreForLinux(type: Exec, dependsOn: extractJdkForLinux) {
    workingDir "$buildDir/temp/extracted/jdk-linux/jdk-${project.jdkVersion}/bin"
    executable 'jlink'
    args '--add-modules', jdkModules, '--output', '../../../jre/ballerina-jre-linux'
}

task assembleJreForWindows(type: Exec, dependsOn: extractJdkForWindows) {
    workingDir "$buildDir/temp/extracted/jdk11-windows/jdk-${project.jdkVersion}/bin"
    executable 'jlink.bat'
    args '--add-modules', jdkModules, '--output', '../../../jre/ballerina-jre-windows'
}

task assembleJreForMac(type: Exec, dependsOn: extractJdkForMac) {
    workingDir "$buildDir/temp/extracted/jdk11-macOS/jdk-${project.jdkVersion}/bin"
    executable 'jlink'
    args '--add-modules', jdkModules, '--output', '../../../jre/ballerina-jre-mac'
}

task buildJreForLinux(type: Zip, dependsOn: assembleJreForLinux) {
    archiveFileName = "ballerina-jre-linux-${project.version}.zip"
    entryCompression = ZipEntryCompression.STORED

    from "$buildDir/temp/extracted/jre/ballerina-jre-linux/"
    include '*'
    outputs.file ballerinaJreLinuxZip
}

task buildJreForWindows(type: Zip, dependsOn: assembleJreForWindows) {
    archiveFileName = "ballerina-jre-windows-${project.version}.zip"
    entryCompression = ZipEntryCompression.STORED

    from "$buildDir/temp/extracted/jre/ballerina-jre-windows/"
    include '*'
    outputs.file ballerinaJreWindowsZip
}

task buildJreForMac(type: Zip, dependsOn: assembleJreForMac) {
    archiveFileName = "ballerina-jre-macOS-${project.version}.zip"
    entryCompression = ZipEntryCompression.STORED

    from "$buildDir/temp/extracted/jre/ballerina-jre-macOS/"
    include '*'
    outputs.file ballerinaJreMacOSZip
}

def moduleVersion = project.version
if (moduleVersion.indexOf('-') != -1) {
    moduleVersion = moduleVersion.substring(0, moduleVersion.indexOf('-'))
}

task build {
    if (Os.isFamily(Os.FAMILY_UNIX)) {
        dependsOn buildJreForLinux
    } else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn buildJreForWindows
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        dependsOn buildJreForMac
    }
}

artifacts {
    ballerinaLinuxDistribution file: ballerinaJreLinuxZip, builtBy: buildJreForLinux
    ballerinaWindowsDistribution file: ballerinaJreWindowsZip, builtBy: buildJreForWindows
    ballerinaMacDistribution file: ballerinaJreMacOSZip, builtBy: buildJreForMac
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/NipunaRanasinghe/ballerina-jre-test")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

release {
    failOnPublishNeeded = false

    buildTasks = ['build']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v$version'

    git {
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task deleteTemporaryFiles(type: Delete) {
    delete "$buildDir/temp/"
}

assembleJreForLinux.dependsOn getModuleList
assembleJreForWindows.dependsOn getModuleList
assembleJreForMac.dependsOn getModuleList

deleteTemporaryFiles.dependsOn build