import groovy.json.JsonSlurper

plugins {
    id "de.undercouch.download" version "4.1.1"
}

def jdkModules = ""

task getModuleList {
    // Reads default modules included in AdoptOpenJre 11
    def defaultModuleFile = new File("$projectDir/resources/adoptOpenJre11_modules.json")
    def defaultModules = new JsonSlurper().parseText(defaultModuleFile.text).modules.join(',')

    // Reads additional modules required for ballerina runtime.
    def additionalModuleFile = new File("$projectDir/resources/additional_modules.json")
    def additionalModules = new JsonSlurper().parseText(additionalModuleFile.text).modules.join(',')
    jdkModules = "${defaultModules},${additionalModules}"
}

task downloadJdkforLinux(type: Download) {
    src linuxJdkUrl
    dest new File("$buildDir/temp/downloads/", "jdk-linux.tar.gz")
    overwrite false
    onlyIfModified true
}

task downloadJdkforWindows(type: Download) {
    src windowsJdkUrl
    dest new File("$buildDir/temp/downloads/", "jdk-windows.zip")
    overwrite false
    onlyIfModified true
}

task downloadJdkforMac(type: Download) {
    src macJdkUrl
    dest new File("$buildDir/temp/downloads/", "jdk-macOS.tar.gz")
    overwrite false
    onlyIfModified true
}

task extractJdkForLinux(type: Copy, dependsOn: downloadJdkforLinux) {
    from tarTree(downloadJdkforLinux.dest)
    into "$buildDir/temp/extracted/jdk-linux"
    includeEmptyDirs = false
}

task extractJdkForWindows(type: Copy, dependsOn: downloadJdkforWindows) {
    from tarTree(downloadJdkforWindows.dest)
    into "$buildDir/temp/extracted/jdk-windows"
    includeEmptyDirs = false
}

task extractJdkForMac(type: Copy, dependsOn: downloadJdkforMac) {
    from tarTree(downloadJdkforMac.dest)
    into "$buildDir/temp/extracted/jdk-mac"
    includeEmptyDirs = false
}

task assembleJreForLinux(type: Exec, dependsOn: extractJdkForLinux) {
    workingDir "$buildDir/temp/extracted/jdk-linux/jdk-${jdkVersion}/bin"
    executable 'jlink'
    args '--add-modules', jdkModules, '--output', '../../../jre/ballerina-jre-linux'
}

task assembleJreForWindows(type: Exec, dependsOn: extractJdkForLinux) {
    workingDir "$buildDir/temp/extracted/jdk11-windows/jdk-${jdkVersion}/bin"
    executable 'jlink'
    args '--add-modules', jdkModules, '--output', '../../../jre/ballerina-jre-windows'
}

task assembleJreForMac(type: Exec, dependsOn: extractJdkForLinux) {
    workingDir "$buildDir/temp/extracted/jdk11-macOS/jdk-${jdkVersion}/bin"
    executable 'jlink'
    args '--add-modules', jdkModules, '--output', '../../../jre/ballerina-jre-mac'
}

task buildJreForLinux(type: Zip, dependsOn: assembleJreForLinux) {
    from "$buildDir/temp/extracted/jre/ballerina-jre-linux/"
    include '*'
    archiveName "ballerina-jre-linux-${project.version}.zip"
    destinationDirectory = file("$buildDir/distributions/")
}

task buildJreForWindows(type: Zip, dependsOn: assembleJreForLinux) {
    from "$buildDir/temp/extracted/jre/ballerina-jre-windows/"
    include '*'
    archiveName "ballerina-jre-windows-${project.version}.zip"
    destinationDirectory = file("$buildDir/distributions/")
}

task buildJreForMac(type: Zip, dependsOn: assembleJreForLinux) {
    from "$buildDir/temp/extracted/jre/ballerina-jre-macOS/"
    include '*'
    archiveName "ballerina-jre-macOS-${project.version}.zip"
    destinationDirectory = file("$buildDir/distributions/")
}

//artifacts {
//    balo configurations.distBal.files
//    zip file: file("$buildDir/distributions/${project.name}-${project.version}.zip"), builtBy: createZip
//    unzipped file: file("$buildDir/extracted-distributions/${project.name}-${project.version}"), builtBy: createDistribution
//}

//release {
//    failOnPublishNeeded = false
//
//    buildTasks = ["build"]
//    versionPropertyFile = 'gradle.properties'
//    tagTemplate = 'v$version'
//
//    git {
//        requireBranch = "release-$version"
//        pushToRemote = 'origin'
//    }
//}
//
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            groupId project.group
//            artifactId project.name
//            version = project.version
//        }
//    }
//
//    repositories {
//        maven {
//            name = "GitHubPackages"
//            url = uri("https://maven.pkg.github.com/NipunaRanasinghe/ballerina-jre-test")
//            credentials {
//                username = System.getenv("packageUser")
//                password = System.getenv("packagePAT")
//            }
//        }
//    }
//}

task deleteTemporaryFiles(type: Delete) {
    delete "$buildDir/temp/"
}

deleteTemporaryFiles.dependsOn buildJreForLinux
deleteTemporaryFiles.dependsOn buildJreForWindows
deleteTemporaryFiles.dependsOn buildJreForMac